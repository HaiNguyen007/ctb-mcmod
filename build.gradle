buildscript {
    repositories {
        mavenCentral()
        maven { url = "http://files.minecraftforge.net/maven" }
        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies { classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT' }
}

plugins {
	id 'java'
    id 'net.franz-becker.gradle-lombok'  version '1.5'
    id 'com.matthewprenger.cursegradle'  version '1.0.5'
	id 'com.github.johnrengelman.shadow' version '1.2.2'
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven-publish'

ext.buildnumber = 0
if (System.getenv('BUILD_NUMBER') != null)
    project.buildnumber = System.getenv('BUILD_NUMBER')
else {
    try {
        ext.buildnumber += "_" + "git rev-parse --abbrev-ref HEAD".execute().text.trim();
        ext.buildnumber += "_" + "git rev-parse --short HEAD".execute().text.trim();
    } catch (all) {}
    logger.lifecycle "No build number detected, setting to ${ext.buildnumber}"
}

group = "com.creatubbles.ctbmod"
archivesBaseName = "CTBMod"
version = "${minecraft_version}-${mod_version}.${buildnumber}"
boolean release = true

if (project.hasProperty('mod_appendix')) {
    version += "_${project.mod_appendix}"
    release = false
}

minecraft {
    version = "${minecraft_version}-${forge_version}"
    mappings = 'snapshot_20160522'
    runDir = 'run'

    replace '@VERSION@', project.version
    replace '@MCVERSION@', project.minecraft_version
    replaceIn "CTBMod.java"
}

repositories {
    mavenCentral()
    maven {
        url = "http://maven.tterrag.com/"
    }
}

dependencies {
    compile "com.creatubbles.api:creatubbles-wsapi:${wsapi_version}"
}

lombok {
    version = "1.16.8"
    sha256 = "fe32b29b7b33eb2b19866cbc5345c59c9984a6036cc396856a04c0d09f99ea68"
}

import net.franz_becker.gradle.lombok.task.DelombokTask

task delombok(type: DelombokTask) {
    args("src/main/java", "-d", "build/sources/delomboked/java")
}

tasks.eclipse.dependsOn installLombok

jar {
    manifest {
        attributes 'FMLAT': 'ctbmod_at.cfg'
    }
	classifier = 'slim'
}

shadowJar {
	exclude 'META-INF/*', 'META-INF/maven/**'
	dependencies {
		exclude(dependency('org.projectlombok:lombok:.*'))
	}
	mergeServiceFiles()
	classifier = ''
}

reobf {
	shadowJar { mappingType = 'SEARGE' }
}

tasks.build.dependsOn reobfShadowJar

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'

        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
        exclude '**/*.properties'
    }
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

println('Changelog:\n' + getChangelogText())

String getChangelogText() {
    def changelogFile = file('changelog.txt')
    String str = ''
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (it.size() > 1) {
            def temp = it
            if (lineCount == 0) {
                temp = "Creatubbles ${version}"
                temp = "<h2>$temp</h2>"
            } else if (it.trim().startsWith('-')) {
                temp = "&nbsp;&nbsp;&nbsp;$temp"
            } else {
                temp = "<h4>$temp</h4>"
            }
            str += "$temp<br/>"
            lineCount++
            return
        } else {
            done = true
        }
    }
    return str
}

tasks.curseforge.enabled = "true".equalsIgnoreCase(System.getenv('CURSE')) && project.hasProperty('curseforge_key')
    
curseforge {
    if (project.hasProperty('curseforge_key')) {
        apiKey = project.curseforge_key
    }
    
    project {
        id = project.projectId
        changelog = System.getenv('CHANGELOG') == null || System.getenv('CHANGELOG').equals('none') ? getChangelogText() : System.getenv('CHANGELOG')
        changelogType = 'html'
        releaseType = project.hasProperty('mod_appendix') ? project.mod_appendix : 'release'
        mainArtifact(shadowJar) {
            displayName = "Creatubbles - ${mod_version}-${buildnumber}"
        }
		addArtifact jar
    }
}

idea { module { inheritOutputDirs = true } }
